/* Auto-generated by genmsg_cpp for file /lu1/smagri/uni/subj/proj30cp/rosWrkSpace/rosVoiceNode/msg/voiceNode.msg */
#ifndef ROSVOICENODE_MESSAGE_VOICENODE_H
#define ROSVOICENODE_MESSAGE_VOICENODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rosVoiceNode
{
template <class ContainerAllocator>
struct voiceNode_ {
  typedef voiceNode_<ContainerAllocator> Type;

  voiceNode_()
  : txt4TTS()
  , voiceName()
  {
  }

  voiceNode_(const ContainerAllocator& _alloc)
  : txt4TTS(_alloc)
  , voiceName(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _txt4TTS_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  txt4TTS;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _voiceName_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  voiceName;


  typedef boost::shared_ptr< ::rosVoiceNode::voiceNode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosVoiceNode::voiceNode_<ContainerAllocator>  const> ConstPtr;
}; // struct voiceNode
typedef  ::rosVoiceNode::voiceNode_<std::allocator<void> > voiceNode;

typedef boost::shared_ptr< ::rosVoiceNode::voiceNode> voiceNodePtr;
typedef boost::shared_ptr< ::rosVoiceNode::voiceNode const> voiceNodeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rosVoiceNode::voiceNode_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rosVoiceNode::voiceNode_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rosVoiceNode

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rosVoiceNode::voiceNode_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rosVoiceNode::voiceNode_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rosVoiceNode::voiceNode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0da82377af97bdc608894b2abce81d56";
  }

  static const char* value(const  ::rosVoiceNode::voiceNode_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0da82377af97bdc6ULL;
  static const uint64_t static_value2 = 0x08894b2abce81d56ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosVoiceNode::voiceNode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rosVoiceNode/voiceNode";
  }

  static const char* value(const  ::rosVoiceNode::voiceNode_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rosVoiceNode::voiceNode_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string txt4TTS\n\
string voiceName\n\
\n\
";
  }

  static const char* value(const  ::rosVoiceNode::voiceNode_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rosVoiceNode::voiceNode_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.txt4TTS);
    stream.next(m.voiceName);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct voiceNode_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosVoiceNode::voiceNode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rosVoiceNode::voiceNode_<ContainerAllocator> & v) 
  {
    s << indent << "txt4TTS: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.txt4TTS);
    s << indent << "voiceName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.voiceName);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROSVOICENODE_MESSAGE_VOICENODE_H

